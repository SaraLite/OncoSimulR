knitr::opts_chunk$set(echo = TRUE)
# Working Directory
# workingDirectory <- "Documentos/proyectos_master/proyecto_R/"
# setwd(workingDirectory)
library(OncoSimulR)
library(ggplot2)
# source("./scripts/Function_rep_x1000.R")
options(stringsAsFactors = FALSE) ## get rid of the messages
## Hay que mejorarlas
# Cambiar nombre etiquetas
simul_boxplot<- function(df) {
e <- ggplot(stack(df), aes(x = ind, y = values))
e + geom_boxplot(aes(fill = ind)) +
stat_summary(fun.y = mean, geom = "point",
shape = 18, size = 2.5, color = "#FC4E07")
}
compositionPop <- function(objPop) {
condi <- c("WT", objPop[[1]]$geneNames)
listPop <- lapply(objPop, function(x) tail(x[[1]], 1)[1, -1])
dfPop <- data.frame(matrix(unlist(listPop), ncol = length(condi), byrow = TRUE))
colnames(dfPop) <- condi
simul_boxplot(dfPop)
# dfPopSummary <- apply(dfPop, 2, mean)
# return(data.frame("Mean" = dfPopSummary))
}
simul_boxplot2 <- function(df) {
e <- ggplot(df, aes(x = Genotype, y = N))
e + geom_boxplot(aes(fill = Genotype)) +
stat_summary(fun.y = mean, geom = "point",
shape = 18, size = 2.5, color = "#FC4E07")
}
compositionPop2 <- function(objPop) {
clon_labels <- c("WT", objPop[[1]]$geneNames)
listPop <- sapply(objPop, function(x) tail(x[[1]], 1)[1, -1])
dfPop <- data.frame("Genotype" = rep(clon_labels, length(listPop)/length(clon_labels)),
"N" = c(listPop))
simul_boxplot2(dfPop)
}
## Ejemplo Álex:
# a: beneficio debido a la acidez si hay células que producen ácido.
# v: beneficio (para las células aeróbicas) debido a la vascularización si hay células que
#    están (sobre) produciendo VEGF a un coste c.
# c: coste de producir VEGF.
# Situación 1: De acuerdo a la figura 1, en esta primera situación hay oscilaciones dentro de la población, pero debería acabar ganando G.
In this case, we see that if the fitness benefit of a single unit of acidification is higher than the maximum benefit from the club good for A, G will always have a strictly higher fitness than A, and be selected for. In this scenario, the population will converge towards all G, regardless of the initial proportions (as long as there is at least some G in the population).
```{r}
avc <- function (a, v, c) {
data.frame(Genotype = c("WT", "G", "V", "A"),
Fitness = c("1",
paste0("1 + ", a, " * (f_1 + 1)"),
paste0("1 + ", a, " * f_1 + ", v, " * (f_2 + 1) - ", c),
paste0("1 + ", a, " * f_1 + ", v, " * f_2")
))
}
afavc <- allFitnessEffects(genotFitness = avc(2.5, 2, 1), # Parametros de la interaccion
frequencyDependentFitness = TRUE,
frequencyType = "rel")
simulation <- oncoSimulPop(20,
mc.cores = 6,
afavc,
model = "McFL",
onlyCancer = FALSE,
finalTime = 25,
mu = 1e-2,
initSize = 4000,
keepPhylog = TRUE,
seed = NULL,
errorHitMaxTries = FALSE,
errorHitWallTime = FALSE)
plot(simulation, show = "genotypes", type = "line")
frequencyType = "rel")
simulation <- oncoSimulPop(20,
mc.cores = 6,
afavc,
model = "McFL",
onlyCancer = FALSE,
finalTime = 25,
mu = 1e-2,
initSize = 4000,
keepPhylog = TRUE,
seed = NULL,
errorHitMaxTries = FALSE,
errorHitWallTime = FALSE)
plot(simulation, show = "genotypes", type = "line")
frequencyType = "rel")
simulation <- oncoSimulPop(20,
mc.cores = 6,
afavc,
model = "McFL",
onlyCancer = FALSE,
finalTime = 25,
mu = 1e-2,
initSize = 4000,
keepPhylog = TRUE,
seed = NULL,
errorHitMaxTries = FALSE,
errorHitWallTime = FALSE)
plot(simulation, show = "genotypes", type = "line")
avc <- function (a, v, c) {
data.frame(Genotype = c("WT", "G", "V", "A"),
Fitness = c("1",
paste0("1 + ", a, " * (f_1 + 1)"),
paste0("1 + ", a, " * f_1 + ", v, " * (f_2 + 1) - ", c),
paste0("1 + ", a, " * f_1 + ", v, " * f_2")
))
}
afavc <- allFitnessEffects(genotFitness = avc(2.5, 2, 1), # Parametros de la interaccion
frequencyDependentFitness = TRUE,
frequencyType = "rel")
simulation <- oncoSimulPop(20,
mc.cores = 6,
afavc,
model = "McFL",
onlyCancer = FALSE,
finalTime = 25,
mu = 1e-2,
initSize = 4000,
keepPhylog = TRUE,
seed = NULL,
errorHitMaxTries = FALSE,
errorHitWallTime = FALSE)
avc <- function (a, v, c) {
data.frame(Genotype = c("WT", "G", "V", "A"),
Fitness = c("1",
paste0("1 + ", a, " * (f_1 + 1)"),
paste0("1 + ", a, " * f_1 + ", v, " * (f_2 + 1) - ", c),
paste0("1 + ", a, " * f_1 + ", v, " * f_2")
))
}
afavc <- allFitnessEffects(genotFitness = avc(2.5, 2, 1), # Parametros de la interaccion
frequencyDependentFitness = TRUE,
frequencyType = "rel")
simulation <- oncoSimulPop(20,
mc.cores = 6,
afavc,
model = "McFL",
onlyCancer = FALSE,
finalTime = 25,
mu = 1e-2,
initSize = 4000,
keepPhylog = TRUE,
seed = NULL,
errorHitMaxTries = FALSE,
errorHitWallTime = FALSE)
avc <- function (a, v, c) {
data.frame(Genotype = c("WT", "G", "V", "A"),
Fitness = c("1",
paste0("1 + ", a, " * (f_1 + 1)"),
paste0("1 + ", a, " * f_1 + ", v, " * (f_2 + 1) - ", c),
paste0("1 + ", a, " * f_1 + ", v, " * f_2")
))
}
afavc <- allFitnessEffects(genotFitness = avc(2.5, 2, 1), # Parametros de la interaccion
frequencyDependentFitness = TRUE,
frequencyType = "rel")
simulation <- oncoSimulPop(20,
mc.cores = 6,
afavc,
model = "McFL",
onlyCancer = FALSE,
finalTime = 25,
mu = 1e-2,
initSize = 4000,
keepPhylog = TRUE,
seed = NULL,
errorHitMaxTries = FALSE,
errorHitWallTime = FALSE)
avc <- function (a, v, c) {
data.frame(Genotype = c("WT", "G", "V", "A"),
Fitness = c("1",
paste0("1 + ", a, " * (f_1 + 1)"),
paste0("1 + ", a, " * f_1 + ", v, " * (f_2 + 1) - ", c),
paste0("1 + ", a, " * f_1 + ", v, " * f_2")
))
}
afavc <- allFitnessEffects(genotFitness = avc(2.5, 2, 1), # Parametros de la interaccion
frequencyDependentFitness = TRUE,
frequencyType = "rel")
simulation <- oncoSimulPop(20,
mc.cores = 6,
afavc,
model = "McFL",
onlyCancer = FALSE,
finalTime = 25,
mu = 1e-2,
initSize = 4000,
keepPhylog = TRUE,
seed = NULL,
errorHitMaxTries = FALSE,
errorHitWallTime = FALSE)
plot(simulation, show = "genotypes", type = "line")
compositionPop2(simulation)
avc <- function (a, v, c) {
data.frame(Genotype = c("WT", "G", "V", "A"),
Fitness = c("1",
paste0("1 + ", a, " * (f_1 + 1)"),
paste0("1 + ", a, " * f_1 + ", v, " * (f_2 + 1) - ", c),
paste0("1 + ", a, " * f_1 + ", v, " * f_2")
))
}
afavc <- allFitnessEffects(genotFitness = avc(2.5, 7, 1), # Parametros de la interaccion
frequencyDependentFitness = TRUE,
frequencyType = "rel")
simulation <- oncoSimulPop(20,
mc.cores = 6,
afavc,
model = "McFL",
onlyCancer = FALSE,
finalTime = 25,
mu = 1e-2,
initSize = 4000,
keepPhylog = TRUE,
seed = NULL,
errorHitMaxTries = FALSE,
errorHitWallTime = FALSE)
plot(simulation, show = "genotypes", type = "line")
compositionPop2(simulation)
avc <- function (a, v, c) {
data.frame(Genotype = c("WT", "G", "V", "A"),
Fitness = c("1",
paste0("1 + ", a, " * (f_1 + 1)"),
paste0("1 + ", a, " * f_1 + ", v, " * (f_2 + 1) - ", c),
paste0("1 + ", a, " * f_1 + ", v, " * f_2")
))
}
afavc <- allFitnessEffects(genotFitness = avc(37.5, 2, 1), # Parametros de la interaccion
frequencyDependentFitness = TRUE,
frequencyType = "rel")
simulation <- oncoSimulPop(20,
mc.cores = 6,
afavc,
model = "McFL",
onlyCancer = FALSE,
finalTime = 25,
mu = 1e-2,
initSize = 4000,
keepPhylog = TRUE,
seed = NULL,
errorHitMaxTries = FALSE,
errorHitWallTime = FALSE)
plot(simulation, show = "genotypes", type = "line")
compositionPop2(simulation)
library(BiocStyle)
install.packages("BiocStyle")
library(BiocStyle)
BiocManager::install("BiocStyle")
library(BiocStyle)
x <- c("perro", "gato")
length(x)
1:length(x)
y <- 1:length(x)
as.double(y)
library(OncoSimulR)
library(ggplot2)
options(stringsAsFactors = FALSE) ## get rid of the messages
simul_boxplot2 <- function(df) {
e <- ggplot(df, aes(x = Genotype, y = N))
e + geom_boxplot(aes(fill = Genotype)) +
stat_summary(fun.y = mean, geom = "point",
shape = 18, size = 2.5, color = "#FC4E07")
}
compositionPop2 <- function(objPop) {
clon_labels <- c("WT", objPop[[1]]$geneNames)
listPop <- sapply(objPop, function(x) tail(x[[1]], 1)[1, -1])
dfPop <- data.frame("Genotype" = rep(clon_labels, length(listPop)/length(clon_labels)),
"N" = c(listPop))
simul_boxplot2(dfPop)
}
avc <- function (a, v, c) {
data.frame(Genotype = c("WT", "G", "V", "A"),
Fitness = c("1",
paste0("1 + ", a, " * (f_1 + 1)"),
paste0("1 + ", a, " * f_1 + ", v, " * (f_2 + 1) - ", c),
paste0("1 + ", a, " * f_1 + ", v, " * f_2")
))
}
afavc <- allFitnessEffects(genotFitness = avc(2.5, 2, 1),
frequencyDependentFitness = TRUE,
frequencyType = "rel")
simulation <- oncoSimulPop(20,
mc.cores = 6,
afavc,
model = "McFL",
onlyCancer = FALSE,
finalTime = 25,
mu = 1e-2,
initSize = 4000,
keepPhylog = TRUE,
seed = NULL,
errorHitMaxTries = FALSE,
errorHitWallTime = FALSE)
plot(mean(simulation), show = "genotypes", type = "line")
simulation
library(OncoSimulR)
library(ggplot2)
options(stringsAsFactors = FALSE) ## get rid of the messages
simul_boxplot2 <- function(df) {
e <- ggplot(df, aes(x = Genotype, y = N))
e + geom_boxplot(aes(fill = Genotype)) +
stat_summary(fun.y = mean, geom = "point",
shape = 18, size = 2.5, color = "#FC4E07")
}
compositionPop2 <- function(objPop) {
clon_labels <- c("WT", objPop[[1]]$geneNames)
listPop <- sapply(objPop, function(x) tail(x[[1]], 1)[1, -1])
dfPop <- data.frame("Genotype" = rep(clon_labels, length(listPop)/length(clon_labels)),
"N" = c(listPop))
simul_boxplot2(dfPop)
}
avc <- function (a, v, c) {
data.frame(Genotype = c("WT", "G", "V", "A"),
Fitness = c("1",
paste0("1 + ", a, " * (f_1 + 1)"),
paste0("1 + ", a, " * f_1 + ", v, " * (f_2 + 1) - ", c),
paste0("1 + ", a, " * f_1 + ", v, " * f_2")
))
}
afavc <- allFitnessEffects(genotFitness = avc(2.5, 2, 1),
frequencyDependentFitness = TRUE,
frequencyType = "rel")
simulation <- oncoSimulPop(20,
mc.cores = 6,
afavc,
model = "McFL",
onlyCancer = FALSE,
finalTime = 25,
mu = 1e-2,
initSize = 4000,
keepPhylog = TRUE,
seed = NULL,
errorHitMaxTries = FALSE,
errorHitWallTime = FALSE)
rm(list=ls())
title: "OncoSimulR: Frequency-dependent fitness"
author:
- name: Sara Dorado Alfaro
- name: Miguel Hernández del Valle
- name: Álvaro Huertas García
- name: Diego Mañanes Cayero
- name: Alejandro Martín Muñoz
affiliation: Universidad Autonoma de Madrid (UAM)
